# Use specific version of nvidia cuda image
FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu18.04

# Remove any third-party apt sources to avoid issues with expiring keys.
RUN rm -f /etc/apt/sources.list.d/*.list

# Set shell and noninteractive environment variables
SHELL ["/bin/bash", "-c"]
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL=/bin/bash

# Set working directory
WORKDIR /

# Update and upgrade the system packages (Worker Template)
RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install --yes --no-install-recommends sudo ca-certificates git wget  build-essential  bash libasound2-dev portaudio19-dev -y &&\
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/yerfor/GeneFace.git && \
    cd /GeneFace && \
    mkdir -p ./deep_3drecon/checkpoints/facerecon/ && \
    cd / && \
    wget https://github.com/yerfor/GeneFace/releases/download/v1.1.0/lrs3.zip -P /checkpoints && \
    wget https://github.com/yerfor/GeneFace/releases/download/v1.1.0/May.zip -P /checkpoints  && \
    unzip /checkpoints/lrs3.zip -d /checkpoints && rm /checkpoints/lrs3.zip && \
    unzip /checkpoints/May.zip -d /checkpoints && rm /checkpoints/May.zip

ENV CONDA_DIR /opt/conda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda
ENV PATH=$CONDA_DIR/bin:$PATH
COPY builder/requirements.txt /requirements.txt
RUN echo "ls /opt/conda" && \
    ls /opt/conda && \
    echo "ls /opt/conda/bin" && \
    ls /opt/conda/bin && \
    conda init bash && \
    conda create -n geneface python=3.9.16 -y && \
    source activate geneface && \
    conda install pytorch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 cudatoolkit=11.3 -c pytorch -y && \
    #conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia && \
    conda install -y -c fvcore -c iopath -c conda-forge fvcore iopath && \
    conda install -c bottler nvidiacub -y && \
    conda install pytorch3d -c pytorch3d -y && \
    conda install ffmpeg -y && \
    pip install -r /requirements.txt && \
    rm /requirements.txt


RUN source activate geneface && \
    echo "-------------conda list begin 1----------------" && \
    conda list && \
    echo "-------------conda list end 1----------------"
    #bash docs/prepare_env/install_ext.sh && \
    #echo "-------------conda list begin 2----------------" && \
    #conda list && \
    #echo "-------------conda list end 2----------------"


# Fetch the model
COPY builder/fetch_models.py /fetch_models.py
RUN source activate geneface && \
    python /fetch_models.py && \
    rm /fetch_models.py

RUN mv /01_MorphableModel.mat /GeneFace/deep_3drecon/BFM/01_MorphableModel.mat && \
    mv /BFM_model_front.mat /GeneFace/deep_3drecon/BFM/BFM_model_front.mat && \
    mv /Exp_Pca.bin /GeneFace/deep_3drecon/BFM/Exp_Pca.bin && \

    mv /epoch_20.pth /GeneFace/deep_3drecon/checkpoints/facerecon/epoch_20.pth

RUN cd /GeneFace/data_util/face_tracking && \
    source activate geneface && \
    python convert_BFM.py && \
    echo "-------------convert_BFM.py begin----------------" && \
    ls /GeneFace/data_util/face_tracking/3DMM/3DMM_info.npy && \
    echo "-------------convert_BFM.py end----------------"





# Add the deadsnakes PPA and install Python 3.10
#RUN add-apt-repository ppa:deadsnakes/ppa -y && \
#    apt-get install python3.10-dev python3.10-venv python3-pip -y --no-install-recommends  && \
#    ln -s /usr/bin/python3.10 /usr/bin/python && \
#    rm /usr/bin/python3 && \
#    ln -s /usr/bin/python3.10 /usr/bin/python3 && \
#    apt-get autoremove -y && \
#    apt-get clean -y && \
#    rm -rf /var/lib/apt/lists/*

# Download and install pip
#RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
#    python get-pip.py && \
#    rm get-pip.py

# Install Python dependencies (Worker Template)
#COPY builder/requirements.txt /requirements.txt
#RUN --mount=type=cache,target=/root/.cache/pip \
#    pip install --upgrade pip && \
#    pip install -r /requirements.txt --no-cache-dir   && \
#    rm /requirements.txt


# Copy source code into image
COPY src .

# Set default command
CMD python -u /main.py
